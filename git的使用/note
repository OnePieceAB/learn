git init //生成一个.git 的子目录，产生一个仓库
git status //查看当前仓库目录下所有文件的状态
git add . //将该目录下所有文件添加到暂存区
git add 文件名 //将该文件添加到暂存区
git commit -m  版本名 //将暂存区的文件提交到版本库
git log //查看提交历史
git reset --hard 版本号 //将当前版本回退到指定版本
git reflog //查看babeng版本库中所有版本号
git branch //查看当前分支
git branch 分支名 //创建分支
git checkout 分支名 //切换分支
git merge 分支名 //合并分支
git clone 仓库地址 //克隆仓库
git remote -v //查看远程仓库地址
git remote add 仓库名 仓库地址 //添加远程仓库地址
git push -u origin master //将当前分支提交到远程仓库
git pull //将远程仓库的代码拉到本地仓库
git stash //将当前工作区的代码暂存
git stash pop //将暂存区的代码恢复到工作区
git tag 版本号 //为当前分支打标签
git tag -a 版本号 -m 版本信息 //为当前分支打标签
git tag -a 版本号 -m 版本信息 分支名 //为指定分支打标签
git tag -d 版本号 //删除标签
git diff   版本号1 版本号2 //对比两个版本号之间的差异
git remote add origin <URL> //连接远程库
git push -u origin <分支名>//推送本地内容到远程库
git pull origin master   //
git pull --all // 获取远程所有内容包括tag  
git pull origin next:master // 取回origin主机的next分支，与本地的master分支合并  
git pull origin next //远程分支是与当前分支合并  
//上面一条命令等同于下面两条命令   
git fetch origin  
git merge origin/next 


master分支是主分支，HEAD指向当前分支，master指向当前分支，HEAD指向当前分支，master指向当前分支，master指向当前分支
testing 这是分支 
